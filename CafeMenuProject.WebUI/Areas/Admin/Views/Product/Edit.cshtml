@model EditProductModel

@{
    ViewBag.Title = "Ürün Düzenle";
}

<div class="content-header clearfix">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">@ViewBag.Title</h1>
            </div>
            <div class="col-sm-6 text-right">
                <a href="@Url.Action("List", "Product", new { area = "Admin" })" class="btn btn-primary">
                    <i class="fas fa-square-plus"></i> Tüm Ürünler
                </a>
            </div>
        </div>
    </div>
</div>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card card-danger card-outline">
                    <div class="card-header with-border clearfix">
                        <h3 class="card-title">
                            <i class="fas fa-edit"></i> @ViewBag.Title
                        </h3>
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm("Edit", "Product", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(x => x.ProductId)

                            <div class="form-group">
                                @Html.LabelFor(x => x.ProductName, "Ürün Adı", htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(x => x.ProductName, new { @class = "form-control", placeholder = "Ürün adı" })
                                @Html.ValidationMessageFor(x => x.ProductName, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(x => x.CategoryId, "Kategori", new { @class = "form-label" })
                                @Html.DropDownListFor(
                                    x => x.CategoryId,
                                    new SelectList(Model.AvailableCategories, "Value", "Text", Model.CategoryId),
                                    "Kategori seçiniz...",
                                    new { @class = "form-control" }
                                )
                                @Html.ValidationMessageFor(x => x.CategoryId, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(x => x.Price, "Ürün Fiyatı", htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(x => x.Price, new { @class = "form-control", placeholder = "Ürün fiyatı" })
                                @Html.ValidationMessageFor(x => x.Price, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(x => x.ImagePath, "Ürün Resmi", htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(x => x.ImagePath, new { @class = "form-control", placeholder = "Ürün resmi" })
                                @Html.ValidationMessageFor(x => x.ImagePath, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group mt-3">
                                <button type="submit" class="btn btn-primary" name="save">Kaydet</button>
                                <button type="submit" class="btn btn-primary" name="save-continue">Kaydet ve Devam Et</button>
                                <a href="@Url.Action("Index", "Product")" class="btn btn-secondary">Vazgeç</a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-12">
                <div class="card card-danger card-outline">
                    <div class="card-header with-border clearfix">
                        <h3 class="card-title">
                            <i class="fas fa-edit"></i> Ürün Özellikleri
                        </h3>
                    </div>
                    <div class="card-body">
                        <table id="productproperties-datatable" class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Key</th>
                                    <th>Value</th>
                                    <th>İşlem</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section scripts {

    <script>
        $(function () {
            var table = $('#productproperties-datatable').DataTable({
                processing: true,
                serverSide: true,
                ordering: false,
                responsive: true,
                lengthChange: false,
                autoWidth: false,
                searching: false,
                pageLength: '@Model.ProductPropertySearchModel.PageSize',
                ajax: {
                    url: '@Url.Action("ProductPropertyList", "Product")',
                    type: 'POST',
                    data: function (d) {
                        return {
                            Draw: d.draw,
                            PageIndex: Math.floor(d.start / d.length),
                            PageSize: d.length,
                            ProductId: '@Model.ProductPropertySearchModel.ProductId',
                        };
                    }
                },
                columns: [
                    {
                        data: 'productPropertyId',
                        width: '5%',
                        className: 'text-center'
                    },
                    {
                        data: 'key'
                    },
                    {
                        data: 'value',
                    },
                    {
                        data: null,
                        width: '15%',
                        className: 'text-center',
                        render: function (data, type, row) {
                            return `<a href='/Admin/Product/Edit/${row.productPropertyId}' class='btn btn-primary btn-sm'>Düzenle</a>
                                    <button class="btn btn-danger btn-sm delete-btn" data-id="${row.productPropertyId}">Sil</button>`;
                        }
                    }
                ],
            });

            $('#search-productproperties').on('click', function () {
                table.ajax.reload();
            });

            $('#productproperties-datatable').on('click', '.delete-btn', function () {

                var id = $(this).data('id');

                Swal.fire({
                    title: 'Emin misiniz?',
                    text: "Bu kaydı silmek istediğinize emin misiniz?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Evet, sil!',
                    cancelButtonText: 'Vazgeç'
                }).then((result) => {

                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Admin/Product/DeleteProductProperty/' + id,
                            type: 'POST',
                            success: function (res) {
                                if (res.success) {
                                    $(document).Toasts('create', {
                                        class: 'bg-success',
                                        title: 'Başarılı',
                                        body: 'Ürün özelliği başarıyla silindi.'
                                    });

                                    table.ajax.reload();

                                } else {
                                    var message = res.message || 'Silme işlemi başarısız oldu.';

                                    $(document).Toasts('create', {
                                        class: 'bg-danger',
                                        title: 'Hata',
                                        body: message,
                                    });
                                }
                            },
                            error: function () {
                                $(document).Toasts('create', {
                                    class: 'bg-danger',
                                    title: 'Hata',
                                    subtitle: '',
                                    body: 'Silme işlemi başarısız oldu.'
                                });
                            }
                        });
                    }
                });
            });
        });
        </script>
}
